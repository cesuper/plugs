/// Class represents events generated by plugs
/// Values listed are originated from the plug firmware
class Event {
  // size of the tcp packet
  static const packetSize = 64;

  // address that
  final String source;

  // event code
  final int code;

  // event data
  final String? data;

  // ts
  DateTime dateTime;

  //
  String get name => _getEventName(code);

  Event(this.source, this.code, {this.data, DateTime? dateTime})
      : dateTime = dateTime ?? DateTime.now();

  ///
  /// Plug
  ///

  // response recieved for discovery request
  // !this event is not generated by plug.notifier service
  static const discovered = 1;

  // host successfully connected to plug notifier server\
  // !this event is not generated by plug.notifier service
  static const connected = 2;

  // connection with plug notifier server is aborted
  // !this event is not generated by plug.notifier service
  static const removed = 3;

  // Ping event is used to get life-signal from plugs. These events
  // are not handled by the api, but the loss if the ping event results
  // device disconnect event. Plug sends ping events in 1 sec period.
  // this event is ignored by the API by default
  static const ping = 255;

  // request for fw update detected
  static const update = 11;

  ///
  /// Socket
  ///

  // plug removed from socket
  static const socketRemoved = 20;

  // plug process socket content
  static const socketConnecting = 21;

  // plug removed from socket
  static const socketConnected = 22;

  // plug performed write event to socket
  static const socketH43Changed = 23;

  ///
  /// Dio
  ///

  // state of the field pin changed
  static const fieldChanged = 40;

  // state of the input pin changed
  // todo: add pin index, and new value for event data
  static const inputChanged = 41;

  // state of the output pin changed
  // todo: add pin index, and new value for event data
  static const outputChanged = 42;

  ///
  /// Ain
  ///

  //
  static const samplingStarted = 60;

  //
  static const samplingFinished = 61;

  /// decode event to String
  static String _getEventName(int code) {
    switch (code) {
      case discovered:
        return 'PLUG_DISCOVERED';
      case connected:
        return 'PLUG_CONNECTED';
      case removed:
        return 'PLUG_REMOVED';
      case ping:
        return 'PLUG_PING';
      case update:
        return 'PLUG_UPDATE';
      case socketRemoved:
        return 'SOCKET_REMOVED';
      case socketConnecting:
        return 'SOCKET_CONNECTING';
      case socketConnected:
        return 'SOCKET_CONNECTED';
      case socketH43Changed:
        return 'SOCKET_H43_CHANGED';
      default:
        return 'UNKNOWN';
    }
  }

  @override
  String toString() => 'Event(source: $source, code: $code, name: $name)';
}
