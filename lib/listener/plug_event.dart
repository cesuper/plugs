/// Class represents events generated by plugs
/// Values listed are originated from the plug firmware
class PlugEvent {
  // address that
  final String source;

  //
  final int code;

  PlugEvent(this.source, this.code);

  ///
  /// Plug
  ///

  // host successfully connected to plug notifier server\
  // !this code is not originated from the plug
  static const connected = 1;

  // connection with plug notifier server is aborted
  // !this code is not originated from the plug
  static const disconnected = 2;

  // request for fw update detected
  static const update = 3;

  ///
  /// Socket
  ///

  // plug removed from socket
  static const socketRemoved = 10;

  // plug process socket content
  static const socketConnecting = 11;

  // plug removed from socket
  static const socketConnected = 12;

  // plug performed write event to socket
  static const socketContentChanged = 13;

  ///
  /// Dio
  ///

  //
  static const fieldChanged = 20;

  //
  static const inputChanged = 21;

  //
  static const outputChanged = 22;

  ///
  /// Ain
  ///

  //
  static const samplingStarted = 30;

  //
  static const samplingFinished = 31;

  /// decode event to String
  static String _getEventName(int code) {
    switch (code) {
      case 1:
        return 'PLUG_CONNECTED';
      case 2:
        return 'PLUG_DISCONNECTED';
      case 3:
        return 'PLUG_UPDATE';
      case 10:
        return 'SOCKET_REMOVED';
      case 11:
        return 'SOCKET_CONNECTING';
      case 12:
        return 'SOCKET_CONNECTED';
      case 13:
        return 'SOCKET_CONTENT_CHANGED';
      default:
        return 'UNKNOWN';
    }
  }

  @override
  String toString() =>
      'Event(source: $source, code: $code, name: ${_getEventName(code)})';
}
